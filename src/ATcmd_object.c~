/**
********************************************************************************
* @file     ATcmd_object.c
* @author 
* @version  v0.1
* @date     2014.11.25
* @brief    
*           
********************************************************************************
**/

#include <string.h>
#include "ATcmd_object.h"
#include "uart_object.h"
#include "lcd_object.h"

const unsigned char ATcmd[MAX_ATCMD_NUM][6] =
 {
    "AT+SD", /* Set Device [password] */
    "AT+II", /* Init [password]       */

    "AT+GX", /* Get the width of the screen in the current orientation  */
    "AT+GY", /* Get the height of the screen in teh current orientation */
    "AT+DO", /* Device on        */
    "AT+DF", /* Device off       */
    "AT+SC", /* Set Contrast     */
    "AT+SB", /* Set Brightness   */
    "AT+SP", /* Set Display Page */
    "AT+WP", /* Write Page       */

    "AT+cs", /* Clear Screen          */
    "AT+fs", /* Fill Screen with a specified color */
    "AT+sf", /* Set Front Color       */
    "AT+gf", /* Get Front Color       */
    "AT+sb", /* Set Back Color        */
    "AT+gb", /* Get Back Color        */
    "AT+dp", /* Draw Point            */
    "AT+dl", /* Draw line             */
    "AT+dr", /* Draw Rectangele       */
    "AT+dc", /* Draw Circle           */
    "AT+dr", /* Draw Round Rectangele */
    "AT+fr", /* Fill Rectangle        */
    "AT+fc", /* Fill Circle           */
    "AT+fR", /* Fill Round Rectangle  */
    "AT+ps", /* Print String          */
    "AT+pi", /* Print Integer         */
    "AT+pf", /* Print Float           */
    "AT+sF", /* Set Font              */
    "AT+gF", /* Get Font              */
    "AT+gX", /* Get Font Xsize        */
    "AT+gY", /* Get Font Ysize        */
    "AT+dB", /* Draw Bitmap           */

    "AT+DT", /* Data */
    "AT+ED", /* End  */
    "AT+EW", /* Eeprom Write [password]*/
    "AT+FW", /* Flash Write  [password]*/

    "AT+gt"  /*Get TouchXY */
  };




/**
********************************************************************************
* @function  void add_char_to_cmd_buf(object_ATcmd *at_cmd,unsigned char c)
* @brief     Add a character to the ATcmd_buffer.
*            Currently ,the ATcmd must not be longer than ATCMD_BUFFER_SIZE.
* @return    0  --> succeed
*            -1 --> fail (wrong or incomplete command)
********************************************************************************
**/
void add_char_to_cmd_buf(object_ATcmd *at_cmd,int c)
{
  at_cmd->command.buf[at_cmd->command.new_position] = (unsigned char)c;
  at_cmd->command.new_position++;
}

/**
********************************************************************************
* @function  void clean_cmd_buf(object_ATcmd *at_cmd)
* @brief     Write the command buffer with '\0'.
*            Set the command buffer 'new_position' to 0.
*            Set the command status to 'not_start'.
*            After this function ,new command can be read.
********************************************************************************
**/
void clean_cmd_buf(object_ATcmd *at_cmd)
{
  unsigned int count;
  for(count = 0;count < at_cmd->command.new_position ; count++)
    {
      at_cmd->command.buf[count] = '\0';
    }
  at_cmd->command.new_position = 0;
  at_cmd->command.status = not_start;
}


/**
********************************************************************************
* @function  int get_a_cmd(object_ATcmd *at_cmd)
* @brief     Get an ATcmd from the USART1 device to at_cmd->ATcmd_buffer.
*            This need an initilized global object_usart1 variable 'usart1'.        
*            "AT+" starts a ATcmd and ends with ';'.
*            Between the start and the end,
*            these 3 characters '\0' '\nâ€™ ' ' are ignored.
*            There's only one ATcmd in ATcmd_buffer at one time.
* @return    0  --> succeed
*            -1 --> fail (wrong or incomplete command)
********************************************************************************
**/
int get_a_cmd(object_ATcmd *at_cmd)
{
  int c;
  
  switch(at_cmd->command.status)
    {
    case not_start : /* have not gotten "AT+" now */
      c = usart1.getchar(&usart1);   /*get a character from usart1*/
     
      if( c != -1)   /*succeedd to get a character from usart1*/   
	{
	  switch((unsigned char)c)  /*check the "AT+" */     
	    {
	    case 'A':         
	      add_char_to_cmd_buf(at_cmd,c);      /* get 'A' */
	      break;
	    case 'T':
	      if(at_cmd->command.buf[0] == 'A')
		{
		  add_char_to_cmd_buf(at_cmd,c);  /* get "AT" */
		}
	      else
		{
		  clean_cmd_buf(at_cmd);   /* no "AT" , clean the 'A'*/
		}
	      break;
	    case '+':
	      if(at_cmd->command.buf[1] == 'T')
		{
		  add_char_to_cmd_buf(at_cmd,c);  /* get "AT+" */
		  /* update command status*/
		  at_cmd->command.status = incomplete; 
		}
	      else
		{
		  clean_cmd_buf(at_cmd);  /* no "AT+" , clean the "AT" */
		}
	      break;
	    default :
	      clean_cmd_buf(at_cmd);
	      break;
	    }
	}
      else  /*fail to get a character from usart1*/
	{
	  return -1;
	}
      break;
    case incomplete :
      c = usart1.getchar(&usart1);   /*get a character from usart1*/

      if( c != -1)   /*succeedd to get a character from usart1*/   
	{
	  /**************************************************
	   * As "AT+" has started , the following cmd ignores
	   * characters '\0' '\n' ' ' ,and ends with ';'
	   **************************************************/
	  if( (unsigned char)c != '\0' &&     
	      (unsigned char)c != '\n' &&
	      (unsigned char)c != ' ')
	    {
	      add_char_to_cmd_buf(at_cmd,c);
	      if( (unsigned char)c == ';')
		{
		  /* update command status*/
		  at_cmd->command.status = complete;
		}
	    }
	}
      else
	{
	  return -1;
	}
      break;
    case complete :
    default:
      break;
    }
  return 0;
}

/**
********************************************************************************
* @function  int search_cmd_index(object_ATcmd *at_cmd)
* @brief     Get the command index in the array ATcmd[MAX_ATCMD_NUM][6]
*            This index can be related to other application's action array index.
* @return    count  --> the command index in ATcmd[MAX_ATCMD_NUM][6]
*            -1 --> fail
********************************************************************************
**/
int search_cmd_index(object_ATcmd *at_cmd)
{
  int count;
  for(count = 0; count < MAX_ATCMD_NUM ;count++)
    {
      /*check the first 5 chararcters*/
      if( strncmp((const char *)at_cmd->command.buf ,
		  (const char *)&ATcmd[count][0] ,5) == 0)
	{
	  return count;
	}
    }
  return -1;
}

/**
********************************************************************************
* @function  int get_cmd_param(object_ATcmd *at_cmd)
* @brief     Get the command paramters
*            Parameters start after '='
*            This index can be related to other application's action array index.
* @return    count  --> the command index in ATcmd[MAX_ATCMD_NUM][6]
*            -1 --> fail
********************************************************************************
**/
int get_cmd_param(object_ATcmd *at_cmd,unsigned char **args)
{
  unsigned int count; 
  
  if(at_cmd->command.buf[6] == ';') /* no parameters */
    {
      return 0;
    }

  if(at_cmd->command.buf[6] !)

  if(at_cmd->command.buf[6] == ';')  /* '=' starts the parameters */

}

/**
********************************************************************************
* @function  int execute(object_ATcmd *at_cmd)
* @brief     Check the command and execute the related actions
*            When one command has been executed ,another one can be recieved.
*            An initilized global object_usart1 variable 'usart1' needed.  
*            An initilized global object_lcd variable 'lcd' needed.      
* @return    0  --> succeed
*            -1 --> fail
********************************************************************************
**/
int execute_a_cmd(object_ATcmd *at_cmd)
{
  /**************************************************
   * 
   **************************************************/
  int ATcmd_index;
  int arg_num;
  unsigned char *args[6];

  if(at_cmd->command.status == complete)
    {
      ATcmd_index = get_cmd_index(at_cmd);  /* get the cmd index in ATcmd[] */
      arg_num = get_cmd_param(at_cmd ,args);   /* get the cmd parameter */

      if(ATcmd_index == -1 || arg_index == -1) /* fail to get cmd number or param*/
	{
	  return -1;
	}

      at_cmd.action_array[ATcmd_index](args ,arg_num); /* execute the action */
      
      usart1.printf(&usart1,"%s\n",at_cmd->command.buf);
      /**************************************************
       * Clean the command buffer 
       * After this function , new command can be read
       **************************************************/
      clean_cmd_buf(at_cmd);  
      return 0;
    }
  return -1;
}

/**
********************************************************************************
*  @function    object_uart_init(object_uart *,usigned int channel)
*  @brief       Set up an uart struct object with it's channel
*               Default BPS         -- 115200
*                       Word_length -- 8 bits
*                       Stop_Bits   -- 1 bit
*                       Parity      -- none
*                       HW Flow     -- none
*  @return      return 0  --> succeed
*               return -1 --> fail
********************************************************************************
**/
int arction_test(unsigned char **args, int arg_num)
{
  int count;
  if(arg_num == 0)
    {
      usart1.printf(&usart1,"No param here\n");
      return 0;
    }
  for(count = 0; count < arg_num; count++)
    {
      usart1.printf(&usart1,"param %d = %s\n",count+1,*(args+count));
    }
  return 0;
}
/**
********************************************************************************
*  @function    object_uart_init(object_uart *,usigned int channel)
*  @brief       Set up an uart struct object with it's channel
*               Default BPS         -- 115200
*                       Word_length -- 8 bits
*                       Stop_Bits   -- 1 bit
*                       Parity      -- none
*                       HW Flow     -- none
*  @return      return 0  --> succeed
*               return -1 --> fail
********************************************************************************
**/
int object_ATcmd_init(object_ATcmd * at_cmd)
{
  unsigned int count;

  for(count = 0; count < ATCMD_BUFFER_SIZE; count++)
    {
      at_cmd->command.buf[count] = '\0';
    }
  at_cmd->command.new_position = 0;
  at_cmd->command.status = not_start;

  at_cmd->get_cmd = get_a_cmd;
  at_cmd->execute = execute_a_cmd; 
  return 0;
}
